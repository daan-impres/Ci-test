<?xml version="1.0" encoding="UTF-8"?>
<project name="test" default="check-property">

	<!--Filling property's, these will be defined by the previous build job -->
	<target name="fill-property">
		<property name="build.workspace" value="${WORKSPACE}" />
		<property name="build.jobnumber" value="${JOBNUMBER}" />
		<property name="directory.exists" value="NULL"/>
        <property name="directory.base" value="workspace/${build.jobnumber}" />
	</target>
	
	<!--Check if the property's are filled and return and error or continue deployment -->
		<target name="check-property" depends="fill-property">
		<php function="preg_replace" returnProperty="build.jobnumber">
			<param value="/[$]/" />
			<param value="" />
			<param value="${build.jobnumber}" />
		</php>
		<php function="preg_replace" returnProperty="build.workspace">
			<param value="/[$]/" />
			<param value="" />
			<param value="${build.workspace}" />
		</php>
		
		<if>
			<not> 
			<and>
				<equals arg1="${build.workspace}" arg2="{WORKSPACE}" />
				<equals arg1="${build.jobnumber}" arg2="{JOBNUMBER}" />
			</and>
			</not>not<then>
                <echo message="${build.workspace}" />
                <echo message="${build.jobnumber}" />
				<phingcall target="check-jobnumber" />
			</then>
			<else>
                <echo message="${build.workspace}" />
                <echo message="${build.jobnumber}" />
				<fail message="Build failed because a property was missing. This could happen due to pushing the build now button."/>
			</else>
		</if>
	</target>

	<!--Checks if the folders already exist for source code backup. If they do this is a redeployment.
		 If not create folder and start deploying -->
	<target name="check-jobnumber">jobnumber<available file="workspace/${build.jobnumber}" type="dir" property="directory.exists" value="1"/>
		<if>
			<equals arg1="${directory.exists}" arg2="1" />
			<then>
				<echo message="Starting a redeployment" />
				<phingcall target="deploy" />
			</then>
			<else>
				<echo message="Creating a backup of the source for a possible redeployment" />
				<mkdir dir="workspace/${build.jobnumber}/source" />
				<copy todir="workspace/${build.jobnumber}/source">
					<fileset dir="${build.workspace}/source">
						<include name="**/**" />
					</fileset>fileset</copy>copy<mkdir dir="workspace/${build.jobnumber}/deploy" />
    			<copy todir="workspace/${build.jobnumber}/deploy">
					<fileset dir="${build.workspace}/deploy">
						<include name="**/**" />
					</fileset>fileset</copy>
				<phingcall target="deploy" />
			</else>
		</if>
	</target>

    <!-- Include the properties file -->
    <target name="configure">    
    <property file="build.properties" />

        <tstamp />
    </target>
    
    <!-- database task should be moved to seperate XML phingcall to call the file -->
    <target name="dbprepare">
	<echo msg="Preparing database" />
        <pdosqlexec url="${db.driver}:host=${db.host}" userid="${db.user}" password="${db.pass}">
            <fileset dir="${directory.base}/deploy/sql/prepare/">
              <include name="*.sql"/>
            </fileset>
        </pdosqlexec>
	<echo msg="Done preparing the database" />
    </target>

    <!-- create our migration task -->
    <target name="dbmigrate" description="Database Migrations">
        <echo msg="Running database migrations..." />

        <!-- these two filenames will contain the generated SQL to do the deploy and roll it back-->
        <property name="build.dbdeploy.deployfile" value="deploy-${DSTAMP}${TSTAMP}.sql" />
        <property name="build.dbdeploy.undofile" value="undo-${DSTAMP}${TSTAMP}.sql" />

        <!-- generate the deployment scripts -->
        <dbdeploy
            url="${db.driver}:host=${db.host};dbname=${db.name}"
            userid="${db.user}"
            password="${db.pass}"
            checkall="true"
            dir="${directory.base}/deploy/sql/deltas"
            outputfile="${directory.base}/deploy/sql/scripts/${build.dbdeploy.deployfile}"
            undooutputfile="${directory.base}/deploy/sql/scripts/${build.dbdeploy.undofile}" />

        <!-- insert the deployment scripts -->
        <echo msg="migrating new sql" />
        <pdosqlexec url="${db.driver}:host=localhost;dbname=${db.name}" userid="${db.user}" password="${db.pass}">
            <fileset dir="${directory.base}/deploy/sql/scripts/">
                <include name="deploy-${DSTAMP}${TSTAMP}.sql" />
            </fileset>
        </pdosqlexec>
    </target>

    <!-- minify javascript -->
    <target name="jsmin">
    <echo msg="Minifying javascript files" />
        <jsMin targetDir="${directory.base}/source" failOnError="false" suffix="">
          <fileset dir="${directory.base}/source">
            <include name="**/*.js"/>
          </fileset>
        </jsMin>
	<echo msg="Done minifying javascript files" />
    </target>

    <!-- prepare the source for copying to the server -->
    <target name="tar">
	<echo msg="Creating archive of the source and the deploy directory" />
        <tar basedir="${directory.base}/source" destfile="workspace/source-${project.name}-${DSTAMP}${TSTAMP}.tar" compression="bzip2" longfile="fail" />
	<echo msg="Done creating archive" />
    </target>

    <!-- deploy task for database prepare and migrate -->
    <target name="dbdeploy" depends="dbprepare, dbmigrate" />

    <!-- deploy task to deploy the whole application -->
    <target name="deploy" depends="configure, jsmin, tar" />    
</project>

